<%- include("header") %> 

<script>

var UserAddress="";
var Skill_Hash="";

window.addEventListener('load', async () => {
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            await ethereum.enable();
			UserAddress=web3.eth.coinbase;
        } catch (error) {
            alert("User denied account access...");
        }
    }
    else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
		UserAddress=web3.eth.coinbase;
    }
    else {
        alert('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
});


function AddUserSkill()
{
	var ABIString = document.getElementById("hdnContractABI").value; 
	ABIString = ABIString.replace(/'/g , "\"");
	ABIJSON = JSON.parse(ABIString);
	MyContract = web3.eth.contract(ABIJSON).at("<%=ContractAddress%>");

	var Skill_No = document.getElementById("txtLicenceNo").value;
	var Skill_Name = document.getElementById("txtFullName").value;
	var Skill_DOB = document.getElementById("txtDOB").value;
	var Skill_Address = document.getElementById("txtAddress").value;
	
	MyContract.AddUserSkill.sendTransaction(UserAddress,Skill_No,Skill_Name,Skill_DOB,Skill_Hash,Skill_Address,function(err, transactionHash) {
		if(!err)
		{
			location.href="/Message?TransHash="+transactionHash;
		}
		else
		{
			console.log(err)
		}
	});

}

function getSkillHash()
{
	const reader = new FileReader();
	const invoicefile = document.getElementById("invoicefile");
	reader.readAsArrayBuffer(invoicefile.files[0]); // Read Provided File
	  
    reader.onloadend = function() {
			const ipfs = window.IpfsApi('ipfs.infura.io', 5001, {protocol: 'https'}) // Connect to IPFS
			const buf = buffer.Buffer(reader.result) // Convert data into buffer
			
			ipfs.files.add(buf)
				.then(function (result) {
					Skill_Hash=result[0].hash;
					//console.log(SkillHash)
					AddUserSkill();
				})
				.catch(function(err) {
					console.log('Fail: ', err)
			})
  
    }
}

</script>

</head>
<body id="page-top">
<nav id="mainNav" class="navbar navbar-default navbar-fixed-top">
<div class="container">
	<!-- Brand and toggle get grouped for better mobile display -->
	<div class="navbar-header">
		<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
		<span class="sr-only">Toggle navigation</span>
		<span class="icon-bar"></span>
		<span class="icon-bar"></span>
		<span class="icon-bar"></span>
		</button>
	</div>
	
	<!-- Collect the nav links, forms, and other content for toggling -->
	<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
		<ul class="nav navbar-nav navbar-right">
			<li>
				<a class="page-scroll" href="/">Home</a>
			</li>
		</ul>
	</div>
	<!-- /.navbar-collapse -->
	
</div>
<!-- /.container -->
</nav>

<form name="IntelitixForm" method="post">
<div class="container container_body">
	<div class="row">
		<div class="col-md-4 center-block">
			<div class="panel panel-info">
				<div class="panel-heading">
					<h3 class="panel-title">Skill Updation Form</h3>
				</div>
				<div class="panel-body">

					<div class="form-group">
						<label class="control-label" for="txtFullName">Name</label>
						<input autocomplete="off" class="form-control" name="txtFullName" id="txtFullName" type="text" value="" placeholder="Name as per certificate">
					</div>
					<div class="form-group">
						<label class="control-label" for="txtDOB">Assigned Date</label>
						<input autocomplete="off" class="form-control" name="txtDOB" id="txtDOB" type="text" value="" placeholder="DD/MM/YYYY">
					</div>
					<div class="form-group">
						<label class="control-label" for="txtAddress">Certified for</label>
						<textarea class="form-control" rows="4" name="txtAddress" id="txtAddress" placeholder="Any course name or skill for which the certificate is being given ..."></textarea>
					</div>
					<div class="form-group">
						<label class="control-label" for="txtLicenceNo">Duration</label>
						<input autocomplete="off" class="form-control" name="txtLicenceNo" id="txtLicenceNo" type="text" value="" placeholder="0">
					</div>
					<div class="form-group">
						<label class="control-label" for="txtFinanceAmount">Attach Certificate</label>
						<input type="file" name="invoicefile" id="invoicefile">
					</div>
					
					<div class="aligncenter">
						<button type="button" class="btn btnsm btn-primary" onClick="getSkillHash()">Add Skill</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<br>
</div>

<!--input type="hidden" id="hdnContractABI" name="hdnContractABI" value="[{'constant':true,'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'string','name':'RequestedBy','type':'string'},{'internalType':'uint256','name':'Skill_Duration','type':'uint256'},{'internalType':'uint256','name':'Skill_Name','type':'uint256'},{'internalType':'uint256','name':'Skill_AssignedDate','type':'uint256'},{'internalType':'uint256','name':'Skill_Hash','type':'uint256'},{'internalType':'uint256','name':'Skill_CertifiedFor','type':'uint256'},{'internalType':'uint256','name':'Skill_OverAll_Status','type':'uint256'}],'name':'AddSkillRequest','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'string','name':'FullName','type':'string'},{'internalType':'string','name':'EmailID','type':'string'},{'internalType':'uint256','name':'MobileNo','type':'uint256'}],'name':'AddUser','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'string','name':'Skill_Duration','type':'string'},{'internalType':'string','name':'Skill_Name','type':'string'},{'internalType':'string','name':'Skill_AssignedDate','type':'string'},{'internalType':'bytes','name':'Skill_Hash','type':'bytes'},{'internalType':'string','name':'Skill_CertifiedFor','type':'string'}],'name':'AddUserSkill','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'uint256','name':'RequestIndex','type':'uint256'},{'internalType':'uint256','name':'Skill_Duration','type':'uint256'},{'internalType':'uint256','name':'Skill_Name','type':'uint256'},{'internalType':'uint256','name':'Skill_AssignedDate','type':'uint256'},{'internalType':'uint256','name':'Skill_Hash','type':'uint256'},{'internalType':'uint256','name':'Skill_CertifiedFor','type':'uint256'},{'internalType':'uint256','name':'Skill_OverAll_Status','type':'uint256'}],'name':'UpdateRequestStatus','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'uint256','name':'RequestIndex','type':'uint256'}],'name':'ViewSkillRequestDetail','outputs':[{'internalType':'string','name':'RequestedBy','type':'string'},{'internalType':'uint256','name':'Skill_Duration','type':'uint256'},{'internalType':'uint256','name':'Skill_Name','type':'uint256'},{'internalType':'uint256','name':'Skill_AssignedDate','type':'uint256'},{'internalType':'uint256','name':'Skill_Hash','type':'uint256'},{'internalType':'uint256','name':'Skill_CertifiedFor','type':'uint256'},{'internalType':'uint256','name':'Skill_OverAll_Status','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'uint256','name':'RequestIndex','type':'uint256'}],'name':'ViewSkillRequestHeader','outputs':[{'internalType':'string','name':'RequestedBy','type':'string'},{'internalType':'uint256','name':'Skill_OverAll_Status','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'}],'name':'ViewSkillRequestLength','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[],'name':'skillWallet','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'uint256','name':'UserIndex','type':'uint256'}],'name':'viewUser','outputs':[{'internalType':'string','name':'FullName','type':'string'},{'internalType':'string','name':'EmailID','type':'string'},{'internalType':'uint256','name':'MobileNo','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'UserAddress','type':'address'},{'internalType':'uint256','name':'RequestIndex','type':'uint256'}],'name':'viewUserSkill','outputs':[{'internalType':'uint256','name':'Skill_Duration_S','type':'uint256'},{'internalType':'string','name':'Skill_Duration_V','type':'string'},{'internalType':'uint256','name':'Skill_Name_S','type':'uint256'},{'internalType':'string','name':'Skill_Name_V','type':'string'},{'internalType':'uint256','name':'Skill_AssignedDate_S','type':'uint256'},{'internalType':'string','name':'Skill_AssignedDate_V','type':'string'},{'internalType':'uint256','name':'Skill_Hash_S','type':'uint256'},{'internalType':'bytes','name':'Skill_Hash_V','type':'bytes'},{'internalType':'uint256','name':'Skill_CertifiedFor_S','type':'uint256'},{'internalType':'string','name':'Skill_CertifiedFor_V','type':'string'}],'stateMutability':'view','type':'function'}]"-->
<!-- Deploy smart contract "SkillWallet.sol" (solidity compiler version 8.0) which is under the folder "SmartContract" into testnet using remix and then copy your abi.json code from their site and paste it into abi.ejs file in views folder -->
<input type="hidden" id="hdnContractABI" name="hdnContractABI" value='[{"constant":true, <%- include("abi") %>'>

</form>

<footer class="navbar-fixed-bottom">
<div class="container">
	<div class="row">
		<div class="col-md-12 text-center">
			<div class="footer-copyright">
				&copy; 2021 SkillWallet
			</div>
		</div>
	</div>
</div>
</footer>

<script src="../public/js/buffer/buffer.js"></script>
<script src="../public/js/ipfsapi/index.js"></script>

<script src="../public/js/jquery.js"></script>
<script src="../public/js/bootstrap.min.js"></script>
<script src="../public/js/sweet-alert.min.js"></script>

</body>
</html>

<!--<script src="../public/js/ipfsapi/index.js" integrity="sha384-5bXRcW9kyxxnSMbOoHzraqa7Z0PQWIao+cgeg327zit1hz5LZCEbIMx/LWKPReuB" crossorigin="anonymous"></script>-->